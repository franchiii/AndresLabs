"""
A basic template file for using the Model class in PicoLibrary
This will allow you to implement simple Statemodels with some basic
event-based transitions.

Currently supports only 4 buttons (hardcoded to BTN1 through BTN4)
and a TIMEOUT event for internal tranisitions.

For processing your own events such as sensors, you can implement
those in your run method for transitions based on sensor events.
"""

# Import whatever Library classes you need - Model is obviously needed
import time
import random
from Button import *
from Counters import *
from Displays import *
from Lights import *
from Playerss import *
from SimonSaysss import *
from Model import *

"""
This is the template Model Runner - you should rename this class to something
that is supported by your class diagram. This should associate with your other
classes, and any PicoLibrary classes. If you are using Buttons, you will implement
buttonPressed and buttonReleased.

To implement the model, you will need to implement 3 methods to support entry actions,
exit actions, and state actions.

This template currently implements a very simple state model that uses a button to
transition from state 0 to state 1 then a 5 second timer to go back to state 0.
"""

class GameController:

    def __init__(self):
        
        # Instantiate whatever classes from your own model that you need to control
        # Handlers can now be set to None - we will add them to the model and it will
        # do the handling
        self._redbutton = Button(16, "red", buttonhandler=None)
        self._greenbutton = Button(17, "green", buttonhandler=None)
        self._bluebutton = Button(18, "blue", buttonhandler=None)
        self._yellowbutton = Button(19, "yellow", buttonhandler=None)
        self.simon_sequence = []
        self._timer = SoftwareTimer(None)
        self._currentPattern = []
        self._redlight = Light(15, 'Red')
        self._greenlight = Light(14, 'Green')
        self._bluelight = Light(13, 'Blue')
        self._yellowlight = Light(12, 'Yellow')
        self.p1Score=0
        self.p2Score=0
        self.whoIsPlaying="Player1"
        self._latestMessage = None
        
        self.player1Played=False
        self.player2Played=False
        self.startingGameValue=0
        
        self.currentSimonPattern = 0
        self.winByHowMuch = 6 #Win by 6 points to end the game
        self._simonObject = SimonSays()

        self.localPlayer1 = Player("Player1")
        self.localPlayer2 = Player("Player2")

        self._display = LCDDisplay(sda=0, scl=1, i2cid=0)
        self._increment = 0
        

        # Instantiate a Model. Needs to have the number of states, self as the handler
        # You can also say debug=True to see some of the transitions on the screen
        # Here is a sample for a model with 4 states
        self._model = Model(5, self, debug=True)
        
        # Up to 4 buttons and a timer can be added to the model for use in transitions
        # Buttons must be added in the sequence you want them used. The first button
        # added will respond to BTN1_PRESS and BTN1_RELEASE, for example
        self._model.addButton(self._redbutton) #0
        self._model.addButton(self._greenbutton) #1
        self._model.addButton(self._bluebutton) #2
        self._model.addButton(self._yellowbutton) #3
        # add other buttons (up to 3 more) if needed
        
        # Add any timer you have.
        self._model.addTimer(self._timer)
        
        # Now add all the transitions that are supported by my Model
        # obvously you only have BTN1_PRESS through BTN4_PRESS
        # BTN1_RELEASE through BTN4_RELEASE
        # and TIMEOUT
        
        # some examples:
        self._model.addTransition(0, [BTN1_PRESS], 1)

        self._model.addTransition(1, [BTN1_PRESS,BTN2_PRESS,BTN3_PRESS,BTN4_PRESS], 2)

        self._model.addTransition(2, [BTN1_PRESS,BTN2_PRESS,BTN3_PRESS,BTN4_PRESS], 2)

        self._model.addTransition(4, [BTN1_PRESS], 0)

        self._model.addTransition(4, [BTN1_PRESS,BTN2_PRESS,BTN3_PRESS,BTN4_PRESS], 1)

        #We need a state that captures input and leads to another state that captures input again...
        #We need a state to exit this input loop
    
    def addComplexity(self):
  
        numGen=self._simonObject.generateRealRandomNumber()
        print("NEW GEN WORKING", numGen)
        self._currentPattern.append(numGen)
        print("Pattern", self._currentPattern)
        return self._currentPattern
      # numGen=self.generateRealRandomNumber() #->

    def generate_random_light_action_sequence(self, length):
        # Generate a random sequence of light actions of the specified length
        light_actions = ['Red', 'Green', 'Blue', 'Yellow']
        return [random.choice(light_actions) for _ in range(length)]

    def show_random_light_pattern(self, sequence):
        # Display the random light pattern sequence with a delay
        for action in sequence:
            if action == 'Red':
                self._redlight.on()
                time.sleep(1)  # Turn on for 1 second
                self._redlight.off()
            elif action == 'Blue':
                self._bluelight.on()
                time.sleep(1)
                self._bluelight.off()
            elif action == 'Yellow':
                self._yellowlight.on()
                time.sleep(1)
                self._yellowlight.off()
            elif action == 'Green':
                self._greenlight.on()
                time.sleep(1)
                self._greenlight.off()
            

    """
    Create a run() method - you can call it anything you want really, but
    this is what you will need to call from main.py or someplace to start
    the state model.
    """

    def run(self):
        # The run method should simply do any initializations (if needed)
        # and then call the model's run method.
        # You can send a delay as a parameter if you want something other
        # than the default 0.1s. e.g.,  self._model.run(0.25)
        self._model.run()

    """
    stateDo - the method that handles the do/actions for each state
    """
    def stateDo(self, state):
            
        # Now if you want to do different things for each state you can do it:
        if state == 0:
            self._greenlight.blink()
            self._redlight.blink()
            self._yellowlight.blink()
            self._bluelight.blink()
            # self._currentPattern = []
            # self._currentPattern.clear()
            # time.sleep(1)
            # self.p1Score=0
            # self.p2Score=0
            # self.whoIsPlaying="Player1"
            # self._latestMessage = None
            # self.player1Played=False
            # self.player2Played=False
            # self.startingGameValue=0
            # self.currentSimonPattern = 0
            # pass
            # State 0 do/actions


        elif state == 1:
            print("here in state 1")
            pass
        
        elif state == 2:
            print("here in state 2")
            
            pass

        elif state == 3:
            print("here in state 3")
            time.sleep(1)
            
            pass

        elif state == 4:
            print("Here is state 4")
            
            pass

        elif state == 5:
            print("Here is state 5")
            
            pass
    """
    stateEntered - is the handler for performing entry/actions
    You get the state number of the state that just entered
    Make sure actions here are quick
    """
    def mapNumberToColor(self, numberGiven):
        #7 = yellow
        #5 = blue
        #3 = green
        #1 = red
        if(numberGiven == 7):
            return "Yellow"
        if(numberGiven == 5):
            return "Blue"
        if(numberGiven == 3):
            return "Green"
        if(numberGiven == 1):
            return "Red"

    def switchPlayer(self, player):
        print("switching now")
        if(self.whoIsPlaying=="Player1"):
            print("Now should be player2")
            self.whoIsPlaying="Player2"
            return
        if(self.whoIsPlaying=="Player2"):
            print("Now should be player1")
            self.whoIsPlaying="Player1"
            return

    def stateEntered(self, state, event):
        # Again if statements to do whatever entry/actions you need
        if state == 0:
            # entry actions for state 0
            print('State 0 entered')
            self._display.showText("Ready Players?",0)
            self._display.showText("Press RED Button",1)
            pass
        
        elif state == 1:
            # entry actions for state 1
            print('State 1 entered')
            self._display.showText("Play:"+self.whoIsPlaying, 0)
            print("LOOK@")
            print(self._model._curState)
            if(self.player1Played and self.player2Played):
                self.addComplexity()
                print("RESETTING THE PLAYER COUNT FOR BOTH")
                self.player1Played=False
                self.player2Played=False
                

            if(self.startingGameValue == 0):
                self.addComplexity()
                self.startingGameValue=1

            self.show_random_light_pattern(self._currentPattern)

            self._display.showText("P1: "+str(self.p1Score)+"P2: "+str(self.p2Score), 1) #Real score

            pass
            

        elif state == 2:
            self.currentGlobalSimonPattern = len(self._currentPattern) #Current pattern lenght in game. 1.2.3.4
            print ('State 2 entered here-----')
            print("LOOK --- state2")
            print(self._model._curState)
            print("current event,", self._model._currentEvent)
            whatButtonWasPressed = self.mapNumberToColor(self._model._currentEvent) #1
            print("what button was being pressed?", whatButtonWasPressed)
      

            if(whatButtonWasPressed==self._currentPattern[self.currentSimonPattern]):
                #If players were correct
                print("correct")
                if(self.whoIsPlaying == "Player1"):
                    self.p1Score = self.p1Score + 1
                    self._latestMessage = self.whoIsPlaying+"Wins"
                    if(self.whoIsPlaying == "Player1"):
                        self.player1Played=True
                    if(self.whoIsPlaying == "Player2"):
                        self.player2Played=True
                    
                if(self.whoIsPlaying == "Player2"):
                    self.p2Score = self.p2Score + 1
                    self._latestMessage = self.whoIsPlaying+"Wins"
                    if(self.whoIsPlaying == "Player1"):
                        self.player1Played=True
                    if(self.whoIsPlaying == "Player2"):
                        self.player2Played=True

                if(self.currentSimonPattern == len(self._currentPattern)-1):
                    self._model.gotoState(3)
                else:
                    #Pattern is longer and we must ask for user input....
                    self.currentSimonPattern = self.currentSimonPattern + 1
                
            else:
                print("wrong")
                self._latestMessage = self.whoIsPlaying+"Loses"
                if(self.whoIsPlaying == "Player1"):
                    self.player1Played=True
                if(self.whoIsPlaying == "Player2"):
                    self.player2Played=True

                self._model.gotoState(3)
                

            pass
    
        elif state == 3:
            #Information state.
            print("Entered state 3")
            # entry actions for state 2
            print("self.p1Score", self.p1Score)
            print("self.p2Score", self.p2Score)
            

            self.currentSimonPattern = 0
            self._display.showText(self._latestMessage, 0)
            time.sleep(1)  # Turn on for 1 second

            self.switchPlayer(self.whoIsPlaying)

            self._display.showText(self.whoIsPlaying+"'s turn", 0)
            self._display.showText("P1: "+str(self.p1Score)+"P2: "+str(self.p2Score), 1)
            time.sleep(2)  # Turn on for 2 second
            self._display.reset()
            self._display.showText("Play."+self.whoIsPlaying, 0)
            time.sleep(2)  # Turn on for 2 second
            self._model.gotoState(4)

            pass

        elif state == 4:
            print("in state 4")
            print("self.player1Played",self.player1Played)
            print("self.player2Played", self.player2Played)
            print("self.p1Score", self.p1Score)
            print("self.p2Score", self.p2Score)
            if(self.player1Played and self.player2Played):
                if(self.p1Score > self.p2Score+self.winByHowMuch):
                    #P1 won
                    print("P1! WON")
                    # self._model.gotoState(5)
                else:
                    if(self.p2Score > self.p1Score+self.winByHowMuch):
                    #P2 won
                        print("P2! WON")
                        # self._model.gotoState(5)
                    else:
                        self._model.gotoState(1)
            else:
                self._model.gotoState(1)

            pass

        # elif state == 5:
        #     print("Who won? time to show it")
        #     self._display.showText("Final Score", 0)
        #     self._display.showText("P1: "+str(self.p1Score)+"P2: "+str(self.p2Score), 1)
        #     pass
            
    """
    stateLeft - is the handler for performing exit/actions
    You get the state number of the state that just entered
    Make sure actions here are quick
    
    This is just like stateEntered, perform only exit/actions here
    """

    def stateLeft(self, state, event):
        if state == 0:
            print ('State 0 exited')
            self._redlight.off()
            self._greenlight.off()
            self._bluelight.off()
            self._yellowlight.off()
            self._display.reset()
            pass

        if state == 1:
            # exit actions for state 1
            print('State 1 exited')
            # self._timer.cancel()
            pass

        
        elif state == 2:
            # exit actions for state 2
            print ('State 2 exited')
            pass


        elif state == 3:
            # exit actions for state 2
            print ('State 3 exited')
            self._display.reset()
            pass


        elif state == 4:
            # exit actions for state 2
            print ('State 4 exited')
            self._display.reset()
            pass

        # elif state == 5:
        #     # exit actions for state 2
        #     print ('State 5 exited')
            
        #     print("Who won? time to show it here")
        #     self._display.showText("Final Score", 0)
        #     self._display.showText("P1: "+str(self.p1Score)+"P2: "+str(self.p2Score), 1)
        #     time.sleep(2)
        #     self._display.reset()
        #     self._display.showText("Prs Red 2 Reset", 0)
        #     time.sleep(1)
        #     self._display.reset()
        #     self._display.reset()
        #     self._model.gotoState(1)
            
        #     pass


# Test your model. Note that this only runs the template class above
# If you are using a separate main.py or other control script,
# you will run your model from there.
if __name__ == '__main__':
    GameController().run()
